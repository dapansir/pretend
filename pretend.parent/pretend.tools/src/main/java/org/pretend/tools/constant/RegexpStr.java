package org.pretend.tools.constant;
/***
 * \cx    匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 'c' 字符。<br/>
 * \f 	  匹配一个换页符。等价于 \x0c 和 \cL。<br/>
 * \n      匹配一个换行符。等价于 \x0a 和 \cJ。<br/>
 * \r 	  匹配一个回车符。等价于 \x0d 和 \cM。<br/>
 * \s      匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。<br/>
 * \w     查找单词字符<br/>
 * \W    查找非单词字符<br/>
 * \d      查找数字<br/>
 * \D     查找非数字字符。
 * \\uxxxx 查找以十六进制数 xxxx 规定的 Unicode 字符。<br/>
 * \S      匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。<br/>
 * \t       匹配一个制表符。等价于 \x09 和 \cI。<br/>
 * \v      匹配一个垂直制表符。等价于 \x0b 和 \cK。<br/>
 * $        匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 '\n' 或 '\r'。要匹配 $ 字符本身，请使用 \$。<br/>
 * ( ) 	  标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 \( 和 \)。<br/>
 * *        匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 \*。<br/>
 * +        匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 \+。<br/>
 * .         匹配除换行符 \n之外的任何单字符。要匹配 .，请使用 \。<br/>
 * [        记一个中括号表达式的开始。要匹配 [，请使用 \[。<br/>
 * ?        匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使\?。<br/>
 * \        将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， 'n' 匹配字符 'n'。'\n' 匹配换行符。序列 '\\' 匹配 "\"，而 '\(' 则匹配 "("。<br/>
 * ^        匹配输入字符串的开始位置，除非在方括号表达式中使用，此时它表示不接受该字符集合。要匹配 ^ 字符本身，请使用 \^。<br/>
 * {        标记限定符表达式的开始。要匹配 {，请使用 \{。<br/>
 * |        标 明两项之间的一个选择。要匹配 |，请使用 \|。<br/>
 * 
 * {n} n        是一个非负整数。匹配确定的 n 次。例如，'o{2}' 不能匹配 "Bob" 中的 'o'，但是能匹配 "food" 中的两个 o。<br/>
 * {n,} n       是一个非负整数。至少匹配n 次。例如，'o{2,}' 不能匹配 "Bob" 中的 'o'，但能匹配 "foooood" 中的所有 o。'o{1,}' 等价于 'o+'。'o{0,}' 则等价于 'o*'。<br/>
 * {n,m}       m 和 n 均为非负整数，其中n <= m。最少匹配 n 次且最多匹配 m 次。例如，"o{1,3}" 将匹配 "fooooood" 中的前三个 o。'o{0,1}' 等价于 'o?'。请注意在逗号和两个数之间不能有空格。<br/>
 * ?=n   匹配任何其后紧接指定字符串 n 的字符串。<br/>
 * ?!n    匹配任何其后没有紧接指定字符串 n 的字符串。<br/>
 * 
 * 验证前端传入的参数!
 * @author EX_PANJB1
 *
 */
public final class RegexpStr {

	private RegexpStr(){
		
	}
	
	public static final String DATE_REG = "^[0-9]{1,4}(:|/|-){1}(((0?1|0?3|0?5|0?7|0?8|10|12){1}(:|/|-){1}(0?[1-9]{1}|[1-2]{1}[0-9]{1}|3[0-1]{1}))|(0?2(:|/|-){1}(0?[1-9]{1}|1[0-9]{1}|2[0-9]{1}))|((0?4|0?6|0?9|11)(:|/|-)(0?[1-9]{1}|[1-2]{1}[0-9]{1}|30)))$";
	
	public static final String SPACE_REG = "\\s";
	
	public static final String LETTER_REG = "^[a-zA-Z]+$";
	
	public static final String NUM_REG = "^\\d+$";
	
	public static final String NUM_AND_LETTER_REG = "^[0-9a-zA-Z]+$";
	
	public static final String MAIL_REG = "^[0-9a-zA-Z]+(\\.[0-9a-zA-Z]+)*@[0-9a-zA-Z]+\\.(com|cn)$";
	
	public static final String MOBILE_PHONE_REG = "^1[34578]{1}\\d{9}$";
	
	public static final String EN_DASH = "_";
	
}
